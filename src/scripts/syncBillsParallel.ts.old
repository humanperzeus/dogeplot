// Remove the default environment loading
// import './loadEnv.js';
import { config } from "dotenv";
import { Worker, parentPort } from 'worker_threads';
import axios from "axios";
import path from 'path';
import { fileURLToPath } from 'url';
import { promises as fs } from 'fs';
import { envLoader } from './loadEnv.js';
import { v5 as uuidv5 } from 'uuid';
import { dirname } from 'path';
import { spawn } from 'child_process';
import { PDFExtract } from 'pdf.js-extract';
import { updateDisplay } from './updateDisplay.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Parse command line arguments first to get environment
const args = process.argv.slice(2);
const options = {
  limit: 100,
  congress: undefined as string | undefined,
  offset: 0,
  threads: 4,
  savePdfs: false,
  env: 'staging' // Default to staging
};

// Process arguments to get environment first
args.forEach(arg => {
  if (arg === '--production') {
    options.env = 'production';
  } else if (arg === '--staging') {
    options.env = 'staging';
  }
});

// Clear any existing environment config
envLoader.clearConfig();

// Load environment based on option - do this only once
console.log('\n=== Environment Setup ===');
console.log('Selected environment:', options.env.toUpperCase());
const envConfig = await envLoader.load(options.env);

// Verify environment loaded correctly
if (envConfig.mode !== options.env) {
  throw new Error(`Environment mismatch: expected ${options.env}, got ${envConfig.mode}`);
}

// Now process other arguments
args.forEach(arg => {
  if (arg.startsWith('--limit=')) {
    options.limit = parseInt(arg.split('=')[1]) || 100;
  } else if (arg.startsWith('--congress=')) {
    options.congress = arg.split('=')[1];
  } else if (arg.startsWith('--offset=')) {
    options.offset = parseInt(arg.split('=')[1]) || 0;
  } else if (arg.startsWith('--threads=')) {
    options.threads = parseInt(arg.split('=')[1]) || 4;
  } else if (arg === '--save-pdfs') {
    options.savePdfs = true;
  }
});

// Get environment variables after environment is properly loaded
const supabaseUrl = envConfig.variables.VITE_SUPABASE_URL;
const supabaseServiceRoleKey = envConfig.variables.SUPABASE_SERVICE_ROLE_KEY;
const congressApiKey = envConfig.variables.VITE_CONGRESS_API_KEY;

if (!supabaseUrl || !supabaseServiceRoleKey || !congressApiKey) {
  throw new Error("Required environment variables not found");
}

const pdfExtract = new PDFExtract();

async function extractTextFromPDF(pdfBuffer: Buffer): Promise<string> {
  try {
    const data = await pdfExtract.extractBuffer(pdfBuffer);
    return data.pages
      .map((page) => page.content.map((item) => item.str).join(" "))
      .join("\n");
  } catch (error) {
    console.error("Error extracting text from PDF:", error);
    throw error;
  }
}

// Function to get current congress number
async function getCurrentCongress(): Promise<string> {
  try {
    // First try the direct congress endpoint
    try {
      const response = await axios.get(`https://api.congress.gov/v3/congress?format=json&api_key=${congressApiKey}`);
      if (response.data?.congresses?.[0]?.congress) {
        return response.data.congresses[0].congress;
      }
    } catch (error) {
      console.log('Direct congress endpoint failed, trying alternative method...');
    }

    // If that fails, try getting it from the bills endpoint
    const response = await axios.get(`https://api.congress.gov/v3/bill?format=json&limit=1&api_key=${congressApiKey}`);
    if (response.data?.bills?.[0]?.congress) {
      return response.data.bills[0].congress;
    }

    // If both methods fail, use hardcoded current congress
    console.log('Could not determine congress from API, using current congress (118)');
    return '118';
  } catch (error) {
    console.error('Error fetching current congress:', error);
    // Default to current congress if all methods fail
    console.log('Using default current congress (118)');
    return '118';
  }
}

// Function to fetch bills with pagination
async function fetchAllBills(limit: number, offset: number, congress?: string) {
  const API_LIMIT = 250; // Congress.gov API limit per request
  const bills = [];
  let currentOffset = offset;
  let totalBills = 0;
  let currentCongress = congress;

  // If no congress specified, get the current one
  if (!currentCongress) {
    currentCongress = await getCurrentCongress();
    console.log(`Using congress: ${currentCongress}`);
  }

  while (bills.length < limit) {
    const batchLimit = Math.min(API_LIMIT, limit - bills.length);
    const url = `https://api.congress.gov/v3/bill/${currentCongress}?format=json&limit=${batchLimit}&offset=${currentOffset}&api_key=${congressApiKey}`;
    
    console.log(`Fetching bills ${bills.length + 1} to ${bills.length + batchLimit} (offset: ${currentOffset})...`);
    const response = await axios.get(url);
    
    // Get total count on first request
    if (bills.length === 0) {
      totalBills = response.data.pagination?.count || 0;
      console.log(`Total bills available in congress ${currentCongress}: ${totalBills}`);
      
      if (offset >= totalBills) {
        console.log(`Offset ${offset} is beyond available bills (${totalBills})`);
        break;
      }
    }

    if (!response.data.bills || response.data.bills.length === 0) {
      console.log('No more bills available');
      break;
    }

    bills.push(...response.data.bills);
    currentOffset += response.data.bills.length;

    // If we got fewer bills than requested, there are no more bills available
    if (response.data.bills.length < batchLimit) {
      console.log(`Only ${response.data.bills.length} bills returned, no more available`);
      break;
    }

    // Add a small delay between requests to be nice to the API
    if (bills.length < limit) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  return bills;
}

async function fetchWithRetry(url: string, options?: any, maxRetries = 3) {
  let lastError;
  for (let i = 0; i < maxRetries; i++) {
    try {
      const response = await axios.get(url, {
        ...options,
        headers: {
          'X-API-Key': congressApiKey,
          ...(options?.headers || {})
        }
      });
      return response;
    } catch (error) {
      lastError = error;
      if (error.response) {
        if (error.response.status === 429) {
          await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
          continue;
        }
        if (error.response.status === 503) {
          await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));
          continue;
        }
      }
      throw error;
    }
  }
  throw lastError;
}

async function determineBillStatus(bill) {
  try {
    // Remove API key from URL and add it to headers in fetchWithRetry
    const response = await fetchWithRetry(bill.url);
    console.log('Bill API response:', response);
    const billData = response.data;
    console.log('Bill data:', billData);
    
    if (!billData || !billData.bill || !billData.bill.actions || !billData.bill.actions.url) {
      console.error('Invalid bill data:', billData);
      return null;
    }

    // Remove API key from URL and add it to headers in fetchWithRetry
    const actionsResponse = await fetchWithRetry(billData.bill.actions.url);
    console.log('Actions API response:', actionsResponse);
    const actions = actionsResponse.data.actions;
    console.log('Actions data:', actions);
    
    if (!actions || actions.length === 0) return 'introduced';

    const latestAction = actions[actions.length - 1];
    const actionText = latestAction.text.toLowerCase();

    if (actionText.includes('became public law') || actionText.includes('signed by president')) {
      return 'signed_into_law';
    }

    if (actionText.includes('reported')) {
      return 'reported_by_committee';
    }

    if (actionText.includes('referred to')) {
      return 'referred_to_committee';
    }

    return 'introduced';
  } catch (error) {
    console.error('Error in determineBillStatus:', error);
    return null;
  }
}

async function updateBillStatus(bill, newStatus) {
  try {
    const { data: currentBill, error: queryError } = await supabase
      .from('bills')
      .select('status')
      .eq('id', bill.id)
      .single();

    if (queryError) {
      console.error('Error getting current status:', queryError);
      return;
    }

    // Check if bill exists and get current status
    const { data: existingBill } = await supabase
      .from('bills')
      .select('status')
      .eq('id', bill.id)
      .single();

    // Record status history for new bills or status changes
    if (!existingBill || existingBill.status !== newStatus) {
      console.log(`Status ${existingBill ? 'change' : 'initial'} detected: ${existingBill ? existingBill.status : 'new'} -> ${newStatus}`);
      console.log(`Action text: ${bill.latestAction?.text}`);
      console.log(`Action date: ${bill.latestAction?.actionDate}`);

      const historyEntry = {
        bill_id: bill.id,
        status: newStatus,
        action_text: bill.latestAction?.text || 'Initial status recorded',
        changed_at: bill.latestAction?.actionDate ? new Date(bill.latestAction.actionDate).toISOString() : new Date().toISOString()
      };
      console.log('Inserting history entry:', historyEntry);

      const { error: historyError } = await supabase
        .from('bill_status_history')
        .insert(historyEntry);

      if (historyError) {
        console.error('Error updating status history:', historyError);
      } else {
        console.log('Successfully recorded status history');
      }
    }

    // Update bill status
    const { error: updateError } = await supabase
      .from('bills')
      .update({ 
        status: newStatus,
        latest_action_text: bill.latestAction?.text || null,
        latest_action_date: bill.latestAction?.actionDate ? new Date(bill.latestAction.actionDate).toISOString() : null,
        update_date: new Date().toISOString()
      })
      .eq('id', bill.id);

    if (updateError) {
      console.error('Error updating bill status:', updateError);
    }
  } catch (error) {
    console.error('Error in updateBillStatus:', error);
  }
}

async function fetchBillText(billData) {
  try {
    if (!billData.textVersions?.url) {
      console.log('No text versions URL available');
      return { text: null, source: null, pdfUrl: null };
    }

    console.log('\nFetching text versions from:', billData.textVersions.url);
    const textVersionsResponse = await fetchWithRetry(billData.textVersions.url);
    const textVersions = textVersionsResponse.data.textVersions;

    if (!textVersions || textVersions.length === 0) {
      console.log('No text versions available');
      return { text: null, source: null, pdfUrl: null };
    }

    // Get the latest version
    const latestVersion = textVersions[textVersions.length - 1];
    console.log('\nText version details:');
    console.log('- Date:', latestVersion.date);
    console.log('- Type:', latestVersion.type);
    console.log('Available formats:', latestVersion.formats.map(f => f.type).join(', '));

    // Try formats in order: Text -> XML -> HTML -> PDF
    const txtFormat = latestVersion.formats.find(f => f.type === 'Text');
    const xmlFormat = latestVersion.formats.find(f => f.type === 'Formatted XML');
    const htmlFormat = latestVersion.formats.find(f => f.type === 'Formatted Text');
    const pdfFormat = latestVersion.formats.find(f => f.type === 'PDF');

    // Log format availability
    console.log('\nFormat availability:');
    console.log('- Text format:', txtFormat ? 'Available' : 'Not available');
    console.log('- XML format:', xmlFormat ? 'Available' : 'Not available');
    console.log('- HTML format:', htmlFormat ? 'Available' : 'Not available');
    console.log('- PDF format:', pdfFormat ? 'Available' : 'Not available');

    // Try TXT format first
    if (txtFormat) {
      try {
        console.log('\nAttempting to fetch Text format...');
        const response = await fetchWithRetry(txtFormat.url);
        console.log('Successfully retrieved Text format');
        return {
          text: response.data,
          source: 'api',
          pdfUrl: pdfFormat?.url || null
        };
      } catch (error) {
        console.error("Failed to fetch Text format:", error.message);
      }
    }

    // Try XML format
    if (xmlFormat) {
      try {
        console.log('\nAttempting to fetch XML format...');
        const response = await fetchWithRetry(xmlFormat.url);
        console.log('Successfully retrieved XML format, processing content...');
        const text = response.data
          .replace(/&#x2019;/g, "'")  // apostrophe
          .replace(/&#x201[CD]/g, '"') // quotes
          .replace(/&#x2013;/g, "-")  // en dash
          .replace(/&#x2014;/g, "--") // em dash
          .replace(/&#xA0;/g, " ")    // non-breaking space
          .replace(/<[^>]+>/g, " ")   // remove XML tags
          .replace(/\s+/g, " ")      // normalize whitespace
          .trim();

        return {
          text,
          source: 'api',
          pdfUrl: pdfFormat?.url || null
        };
      } catch (error) {
        console.error("Failed to fetch XML format:", error.message);
      }
    }

    // Try HTML format
    if (htmlFormat) {
      try {
        console.log('\nAttempting to fetch HTML format...');
        const response = await fetchWithRetry(htmlFormat.url);
        console.log('Successfully retrieved HTML format, processing content...');
        const text = response.data
          .replace(/<[^>]+>/g, ' ')
          .replace(/\s+/g, ' ')
          .trim();

        return {
          text,
          source: 'api',
          pdfUrl: pdfFormat?.url || null
        };
      } catch (error) {
        console.error("Failed to fetch HTML format:", error.message);
      }
    }

    // If we have a PDF URL but couldn't get text from other formats
    if (pdfFormat) {
      try {
        console.log('\nAttempting to process PDF format...');
        const pdfResponse = await fetchWithRetry(pdfFormat.url, {
          responseType: 'arraybuffer',
          headers: {
            'Accept': 'application/pdf'
          }
        });
        
        console.log('Successfully downloaded PDF, extracting text...');
        const pdfBuffer = Buffer.from(pdfResponse.data);
        const text = await extractTextFromPDF(pdfBuffer);
        console.log('Successfully extracted text from PDF');
        
        return {
          text,
          source: 'pdf',
          pdfUrl: pdfFormat.url
        };
      } catch (error) {
        console.error("Failed to process PDF:", error.message);
        return {
          text: null,
          source: null,
          pdfUrl: pdfFormat.url
        };
      }
    }

    console.log('No viable text formats found');
    return { text: null, source: null, pdfUrl: null };
  } catch (error) {
    console.error("Error in fetchBillText:", error.message);
    return { text: null, source: null, pdfUrl: null };
  }
}

async function processBill(bill) {
  const billType = bill.type.toLowerCase();
  const billNumber = bill.number;
  const congress = bill.congress;

  try {
    const NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    const billId = uuidv5(`${congress}_${billType}${billNumber}`, NAMESPACE);

    // Get bill details from Congress API
    const billResponse = await fetchWithRetry(`https://api.congress.gov/v3/bill/${congress}/${billType}/${billNumber}?format=json&api_key=${congressApiKey}`);
    const billData = billResponse.data.bill;

    // Get text content
    const { text, source, pdfUrl } = await fetchBillText(billData);

    // Determine bill status
    const newStatus = determineBillStatus(billData);

    // Check if bill exists and get current status
    const { data: existingBill } = await supabase
      .from('bills')
      .select('id, status, has_full_text')
      .eq('id', billId)
      .single();

    // Prepare bill record
    const billRecord = {
      id: billId,
      bill_number: billNumber,
      congress: congress,
      title: billData.title,
      introduction_date: billData.introducedDate ? `${billData.introducedDate}T00:00:00Z` : null,
      status: newStatus,
      analysis_status: 'pending',
      key_points: [],
      analysis: null,
      sponsors: billData.sponsors ? billData.sponsors.map(sponsor => sponsor.fullName) : [],
      committee: billData.committees?.count > 0 ? billData.committees.url : null,
      full_text: text,
      has_full_text: !!text,
      text_source: source,
      bill_type: billType,
      origin_chamber: billData.originChamber || null,
      origin_chamber_code: billData.originChamberCode || null,
      latest_action_date: billData.latestAction?.actionDate ? `${billData.latestAction.actionDate}T00:00:00Z` : null,
      latest_action_text: billData.latestAction?.text || null,
      constitutional_authority_text: billData.constitutionalAuthorityStatementText || null,
      policy_area: billData.policyArea?.name || null,
      subjects: billData.subjects?.count > 0 ? [billData.subjects.url] : [],
      summary: billData.summary?.text || null,
      cbo_cost_estimates: JSON.stringify(billData.cboCostEstimates || []),
      laws: JSON.stringify(billData.laws || []),
      committees_count: billData.committees?.count || 0,
      cosponsors_count: billData.cosponsors?.count || 0,
      withdrawn_cosponsors_count: billData.cosponsors?.countIncludingWithdrawnCosponsors || 0,
      actions_count: billData.actions?.count || 0,
      update_date: billData.updateDate ? new Date(billData.updateDate).toISOString() : null,
      update_date_including_text: billData.updateDateIncludingText ? new Date(billData.updateDateIncludingText).toISOString() : null,
      pdf_url: pdfUrl
    };

    // First, insert or update the bill record
    const { error: upsertError } = await supabase
      .from('bills')
      .upsert(billRecord);

    if (upsertError) {
      throw upsertError;
    }

    // Then, if status has changed, record in history
    if (!existingBill || existingBill.status !== newStatus) {
      const historyEntry = {
        bill_id: billId,
        status: newStatus,
        action_text: billData.latestAction?.text || 'Initial status recorded',
        changed_at: billData.latestAction?.actionDate ? new Date(billData.latestAction.actionDate).toISOString() : new Date().toISOString()
      };

      const { error: historyError } = await supabase
        .from('bill_status_history')
        .insert(historyEntry);

      if (historyError) {
        console.error("Error recording status history:", historyError);
      }
    }

    // Send success message
    parentPort?.postMessage({
      type: 'progress',
      data: {
        success: true,
        bill: { id: billId, type: billType, number: billNumber },
        hasText: !!text,
        textSource: source
      }
    });

  } catch (error) {
    console.error(`Error processing bill ${billType}${billNumber}:`, error);
    parentPort?.postMessage({
      type: 'progress',
      data: {
        success: false,
        error: error.message,
        bill: { type: billType, number: billNumber }
      }
    });
  }
}

async function createWorker(bills: any[], workerIndex: number) {
  const workerScript = `
    import { parentPort, workerData } from 'worker_threads';
    import { createClient } from "@supabase/supabase-js";
    import { PDFExtract } from "pdf.js-extract";
    import axios from "axios";
    import { v5 as uuidv5 } from 'uuid';

    const { bills, workerIndex, env, congressApiKey } = workerData;
    const NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    
    const supabase = createClient(
      env.supabaseUrl,
      env.serviceRoleKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    );

    const pdfExtract = new PDFExtract();

    async function fetchWithRetry(url, options = {}, maxRetries = 3) {
      let lastError;
      for (let i = 0; i < maxRetries; i++) {
        try {
          console.log(\`Attempt \${i + 1} of \${maxRetries} for \${url}\`);
          const response = await axios.get(url, {
            ...options,
            headers: {
              'X-API-Key': congressApiKey,
              ...(options?.headers || {})
            }
          });
          return response;
        } catch (error) {
          lastError = error;
          if (error.response) {
            if (error.response.status === 429) {
              console.log('Rate limit hit, waiting before retry...');
              await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
              continue;
            }
            if (error.response.status === 503) {
              console.log('Service unavailable, waiting before retry...');
              await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));
              continue;
            }
          }
          console.error(\`Attempt \${i + 1} failed:\`, error.message);
          if (i === maxRetries - 1) throw error;
          await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
        }
      }
      throw lastError;
    }

    function determineBillStatus(billData) {
      if (!billData.actions || !billData.actions.count) return "introduced";

      const actionText = billData.latestAction?.text?.toLowerCase() || "";
      const laws = billData.laws || [];

      // Check for terminal states first
      if (laws.length > 0 || actionText.includes("became public law") || actionText.includes("signed by president")) {
        return "signed_into_law";
      }

      if (actionText.includes("veto overridden")) {
        return "veto_overridden";
      }

      if (actionText.includes("vetoed by president") || actionText.includes("vetoed by the president")) {
        return "vetoed";
      }

      // Check for intermediate states
      if (actionText.includes("presented to president") || actionText.includes("sent to president")) {
        return "presented_to_president";
      }

      // Check for chamber passage
      const passedHouse = actionText.includes("passed house") || actionText.includes("passed in house");
      const passedSenate = actionText.includes("passed senate") || actionText.includes("passed in senate");

      if (passedHouse && passedSenate) {
        return "passed_both_chambers";
      }

      if (passedHouse || passedSenate) {
        return "passed_chamber";
      }

      if (actionText.includes("reported") || actionText.includes("ordered to be reported")) {
        return "reported_by_committee";
      }

      if (actionText.includes("referred to")) {
        return "referred_to_committee";
      }

      // Check for failed state
      if (actionText.includes("failed") || actionText.includes("rejected") || actionText.includes("withdrawn")) {
        return "failed";
      }

      return "introduced";
    }

    async function extractTextFromPDF(pdfBuffer) {
      try {
        const data = await pdfExtract.extractBuffer(pdfBuffer);
        return data.pages
          .map((page) => page.content.map((item) => item.str).join(" "))
          .join("\\n");
      } catch (error) {
        console.error("Error extracting text from PDF:", error);
        throw error;
      }
    }

    async function fetchBillText(billData) {
      try {
        if (!billData.textVersions?.url) {
          console.log('No text versions URL available');
          return { text: null, source: null, pdfUrl: null };
        }

        console.log('\\nFetching text versions...');
        const textVersionsResponse = await fetchWithRetry(billData.textVersions.url);
        const textVersions = textVersionsResponse.data.textVersions;

        if (!textVersions || textVersions.length === 0) {
          console.log('No text versions available');
          return { text: null, source: null, pdfUrl: null };
        }

        const latestVersion = textVersions[textVersions.length - 1];
        console.log('\\nText version details:');
        console.log('- Date:', latestVersion.date);
        console.log('- Type:', latestVersion.type);
        console.log('Available formats:', latestVersion.formats.map(f => f.type).join(', '));

        const txtFormat = latestVersion.formats.find(f => f.type === 'Text');
        const xmlFormat = latestVersion.formats.find(f => f.type === 'Formatted XML');
        const htmlFormat = latestVersion.formats.find(f => f.type === 'Formatted Text');
        const pdfFormat = latestVersion.formats.find(f => f.type === 'PDF');

        console.log('\\nFormat availability:');
        console.log('- Text format:', txtFormat ? 'Available' : 'Not available');
        console.log('- XML format:', xmlFormat ? 'Available' : 'Not available');
        console.log('- HTML format:', htmlFormat ? 'Available' : 'Not available');
        console.log('- PDF format:', pdfFormat ? 'Available' : 'Not available');

        if (txtFormat) {
          try {
            console.log('\\nAttempting to fetch Text format...');
            const response = await fetchWithRetry(txtFormat.url);
            console.log('Successfully retrieved Text format');
            return {
              text: response.data,
              source: 'api',
              pdfUrl: pdfFormat?.url || null
            };
          } catch (error) {
            console.error("Failed to fetch Text format:", error.message);
          }
        }

        if (xmlFormat) {
          try {
            console.log('\\nAttempting to fetch XML format...');
            const response = await fetchWithRetry(xmlFormat.url);
            console.log('Successfully retrieved XML format, processing content...');
            const text = response.data
              .replace(/&#x2019;/g, "'")
              .replace(/&#x201[CD]/g, '"')
              .replace(/&#x2013;/g, "-")
              .replace(/&#x2014;/g, "--")
              .replace(/&#xA0;/g, " ")
              .replace(/<[^>]+>/g, " ")
              .replace(/\\s+/g, " ")
              .trim();

            return {
              text,
              source: 'api',
              pdfUrl: pdfFormat?.url || null
            };
          } catch (error) {
            console.error("Failed to fetch XML format:", error.message);
          }
        }

        if (htmlFormat) {
          try {
            console.log('\\nAttempting to fetch HTML format...');
            const response = await fetchWithRetry(htmlFormat.url);
            console.log('Successfully retrieved HTML format, processing content...');
            const text = response.data
              .replace(/<[^>]+>/g, ' ')
              .replace(/\\s+/g, ' ')
              .trim();

            return {
              text,
              source: 'api',
              pdfUrl: pdfFormat?.url || null
            };
          } catch (error) {
            console.error("Failed to fetch HTML format:", error.message);
          }
        }

        if (pdfFormat) {
          try {
            console.log('\\nAttempting to process PDF format...');
            const pdfResponse = await fetchWithRetry(pdfFormat.url, {
              responseType: 'arraybuffer',
              headers: {
                'Accept': 'application/pdf'
              }
            });
            
            console.log('Successfully downloaded PDF, extracting text...');
            const pdfBuffer = Buffer.from(pdfResponse.data);
            const text = await extractTextFromPDF(pdfBuffer);
            console.log('Successfully extracted text from PDF');
            
            return {
              text,
              source: 'pdf',
              pdfUrl: pdfFormat.url
            };
          } catch (error) {
            console.error("Failed to process PDF:", error.message);
            return {
              text: null,
              source: null,
              pdfUrl: pdfFormat.url
            };
          }
        }

        console.log('No viable text formats found');
        return { text: null, source: null, pdfUrl: null };
      } catch (error) {
        console.error("Error in fetchBillText:", error.message);
        return { text: null, source: null, pdfUrl: null };
      }
    }

    async function processBill(bill) {
      const billType = bill.type.toLowerCase();
      const billNumber = bill.number;
      const congress = bill.congress;

      try {
        const billId = uuidv5(\`\${congress}_\${billType}\${billNumber}\`, NAMESPACE);

        // Get bill details from Congress API
        const billResponse = await fetchWithRetry(\`https://api.congress.gov/v3/bill/\${congress}/\${billType}/\${billNumber}?format=json&api_key=\${congressApiKey}\`);
        const billData = billResponse.data.bill;

        // Get text content
        const { text, source, pdfUrl } = await fetchBillText(billData);

        // Determine bill status
        const newStatus = determineBillStatus(billData);

        // Check if bill exists and get current status
        const { data: existingBill } = await supabase
          .from('bills')
          .select('id, status, has_full_text')
          .eq('id', billId)
          .single();

        // Prepare bill record
        const billRecord = {
          id: billId,
          bill_number: billNumber,
          congress: congress,
          title: billData.title,
          introduction_date: billData.introducedDate ? \`\${billData.introducedDate}T00:00:00Z\` : null,
          status: newStatus,
          analysis_status: 'pending',
          key_points: [],
          analysis: null,
          sponsors: billData.sponsors ? billData.sponsors.map(sponsor => sponsor.fullName) : [],
          committee: billData.committees?.count > 0 ? billData.committees.url : null,
          full_text: text,
          has_full_text: !!text,
          text_source: source,
          bill_type: billType,
          origin_chamber: billData.originChamber || null,
          origin_chamber_code: billData.originChamberCode || null,
          latest_action_date: billData.latestAction?.actionDate ? \`\${billData.latestAction.actionDate}T00:00:00Z\` : null,
          latest_action_text: billData.latestAction?.text || null,
          constitutional_authority_text: billData.constitutionalAuthorityStatementText || null,
          policy_area: billData.policyArea?.name || null,
          subjects: billData.subjects?.count > 0 ? [billData.subjects.url] : [],
          summary: billData.summary?.text || null,
          cbo_cost_estimates: JSON.stringify(billData.cboCostEstimates || []),
          laws: JSON.stringify(billData.laws || []),
          committees_count: billData.committees?.count || 0,
          cosponsors_count: billData.cosponsors?.count || 0,
          withdrawn_cosponsors_count: billData.cosponsors?.countIncludingWithdrawnCosponsors || 0,
          actions_count: billData.actions?.count || 0,
          update_date: billData.updateDate ? new Date(billData.updateDate).toISOString() : null,
          update_date_including_text: billData.updateDateIncludingText ? new Date(billData.updateDateIncludingText).toISOString() : null,
          pdf_url: pdfUrl
        };

        // First, insert or update the bill record
        const { error: upsertError } = await supabase
          .from('bills')
          .upsert(billRecord);

        if (upsertError) {
          throw upsertError;
        }

        // Then, if status has changed, record in history
        if (!existingBill || existingBill.status !== newStatus) {
          const historyEntry = {
            bill_id: billId,
            status: newStatus,
            action_text: billData.latestAction?.text || 'Initial status recorded',
            changed_at: billData.latestAction?.actionDate ? new Date(billData.latestAction.actionDate).toISOString() : new Date().toISOString()
          };

          const { error: historyError } = await supabase
            .from('bill_status_history')
            .insert(historyEntry);

          if (historyError) {
            console.error("Error recording status history:", historyError);
          }
        }

        // Send success message
        parentPort?.postMessage({
          type: 'progress',
          data: {
            success: true,
            bill: { id: billId, type: billType, number: billNumber },
            hasText: !!text,
            textSource: source
          }
        });

      } catch (error) {
        console.error(\`Error processing bill \${billType}\${billNumber}:\`, error);
        parentPort?.postMessage({
          type: 'progress',
          data: {
            success: false,
            error: error.message,
            bill: { type: billType, number: billNumber }
          }
        });
      }
    }

    async function processAllBills() {
      for (const bill of bills) {
        await processBill(bill);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      parentPort?.postMessage('done');
    }

    processAllBills().catch(error => {
      console.error('Worker error:', error);
      process.exit(1);
    });
  `;

  // Create a temporary file for the worker script
  const workerFile = path.join(process.cwd(), 'worker-' + workerIndex + '.mjs');
  await fs.writeFile(workerFile, workerScript, 'utf8');

  // Create and start the worker
  const worker = new Worker(workerFile, {
    workerData: {
      bills: bills,
      workerIndex,
      env: {
        supabaseUrl,
        serviceRoleKey: supabaseServiceRoleKey
      },
      congressApiKey
    }
  });

  return worker;
}

async function runWorker(worker: Worker, bills: any[], workerIndex: number): Promise<void> {
  return new Promise((resolve, reject) => {
    worker.on('message', (message) => {
      if (message === 'done') {
        resolve();
      } else {
        handleWorkerMessage(message, workerIndex);
      }
    });

    worker.on('error', (error) => {
      console.error(\`❌ Worker \${workerIndex} error: \`, error);
      reject(error);
    });

    worker.on('exit', (code) => {
      if (code !== 0) {
        reject(new Error(\`Worker \${workerIndex} stopped with exit code \${code}\`));
      }
    });
  });
}

async function processBillsInParallel(bills: any[]) {
  console.log('\n=== Processing Bills ===');
  console.log(\`Total bills to process: \${bills.length}\`);
  console.log(\`Number of workers: \${options.threads}\`);
  console.log('Starting workers...\n');

  const workers: Promise<void>[] = [];
  const batchSize = Math.ceil(bills.length / options.threads);

  for (let i = 0; i < options.threads; i++) {
    const start = i * batchSize;
    const end = Math.min(start + batchSize, bills.length);
    const batch = bills.slice(start, end);

    if (batch.length > 0) {
      const worker = await createWorker(batch, i);
      workers.push(runWorker(worker, batch, i));
    }
  }

  try {
    await Promise.all(workers);
    console.log('\n=== Processing Complete ===');
  } catch (error) {
    console.error('\n❌ Error in worker:', error);
  }
}

// Global stats tracking
let global = {
  workerStats: new Map()
};

function handleWorkerMessage(message: any, workerIndex: number) {
  // Get or initialize worker stats
  let stats = global.workerStats.get(workerIndex) || {
    processed: 0,
    successful: 0,
    failed: 0,
    newBills: 0,
    statusChanges: 0,
    withText: 0,
    apiText: 0,
    pdfText: 0,
    currentBill: '',
    currentStatus: '',
    lastUpdate: Date.now()
  };

  if (message.type === 'progress') {
    // Update worker stats
    stats.processed++;
    if (message.data.success) {
      stats.successful++;
      if (message.data.hasText) {
        stats.withText++;
        if (message.data.textSource === 'api') {
          stats.apiText++;
        } else if (message.data.textSource === 'pdf') {
          stats.pdfText++;
        }
      }
    } else {
      stats.failed++;
    }
    stats.currentBill = message.data.bill.type + message.data.bill.number;
    stats.lastUpdate = Date.now();
  }

  // Update global stats
  global.workerStats.set(workerIndex, stats);

  // Update display
  updateDisplay(global.workerStats, options);
}

async function main() {
  try {
    console.log("\n\x1b[1m\x1b[36m=== 🚀 Starting Parallel Bill Synchronization 🚀 ===\x1b[0m");
    console.log("\x1b[1m\x1b[33mEnvironment:\x1b[0m", \`\x1b[32m${options.env}\x1b[0m\`);
    console.log("\x1b[1m\x1b[33mDatabase URL:\x1b[0m", \`\x1b[32m${supabaseUrl}\x1b[0m\`);
    console.log("\x1b[1m\x1b[33mThreads:\x1b[0m", \`\x1b[32m${options.threads}\x1b[0m\`);
    console.log("\x1b[1m\x1b[33mLimit:\x1b[0m", \`\x1b[32m${options.limit}\x1b[0m\`);
    console.log("\x1b[1m\x1b[33mOffset:\x1b[0m", \`\x1b[32m${options.offset}\x1b[0m\`);
    console.log("\x1b[1m\x1b[33mCongress:\x1b[0m", options.congress ? \`\x1b[32m${options.congress}\x1b[0m\` : "\x1b[90mAuto-detect\x1b[0m");
    console.log("\x1b[1m\x1b[33mSave PDFs:\x1b[0m", options.savePdfs ? "\x1b[32mYes\x1b[0m" : "\x1b[90mNo\x1b[0m");
    console.log();

    // Fetch bills
    const bills = await fetchAllBills(options.limit, options.offset, options.congress);
    if (bills.length === 0) {
      console.log("\x1b[31m⚠️ No bills found to process\x1b[0m");
      return;
    }

    console.log("\n\x1b[1m\x1b[36m=== 📋 Processing Bills 📋 ===\x1b[0m");
    console.log(\`\x1b[1mTotal bills to process:\x1b[0m \x1b[32m${bills.length}\x1b[0m\`);
    console.log(\`\x1b[1mNumber of workers:\x1b[0m \x1b[32m${options.threads}\x1b[0m\`);
    console.log("\x1b[33m🔄 Starting workers...\x1b[0m\n");

    // Split bills into batches
    const batchSize = Math.ceil(bills.length / options.threads);
    const billBatches = [];
    for (let i = 0; i < bills.length; i += batchSize) {
      billBatches.push(bills.slice(i, i + batchSize));
    }

    // Start workers
    const workers = [];
    for (let i = 0; i < options.threads; i++) {
      const batch = billBatches[i] || [];
      if (batch.length > 0) {
        const worker = await createWorker(batch, i);
        workers.push(runWorker(worker, batch, i));
      }
    }

    // Wait for all workers to complete
    await Promise.all(workers);

    console.log("\n\x1b[1m\x1b[36m=== ✅ Processing Complete ✅ ===\x1b[0m");
  } catch (error) {
    console.error("\n\x1b[31m❌ Error in main process:\x1b[0m", error);
    process.exit(1);
  }
}

// Run the main function
main().catch(error => {
  console.error("Unhandled error:", error);
  process.exit(1);
});